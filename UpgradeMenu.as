package src.shooter {	import flash.display.MovieClip;	import flash.events.*;	import src.core.Game;	public class UpgradeMenu extends MovieClip{		var abilityNode1:UpgradeAbilityNode;		var abilityNode2:UpgradeAbilityNode;		var abilityNode3:UpgradeAbilityNode;		var abilityNode4:UpgradeAbilityNode;		var abilityNode5:UpgradeAbilityNode;		public function UpgradeMenu(){															//Ability previews			abilityNode1 = new UpgradeAbilityNode();			addChild(abilityNode1);			abilityNode1.x = 340;			abilityNode1.y = 110;			abilityNode1.alpha = 1.0;						abilityNode2 = new UpgradeAbilityNode();			addChild(abilityNode2);			abilityNode2.x = 340;			abilityNode2.y = 170;			abilityNode2.alpha = 0.5;						abilityNode3 = new UpgradeAbilityNode();			addChild(abilityNode3);			abilityNode3.x = 340;			abilityNode3.y = 230;			abilityNode3.alpha = 0.5;						abilityNode4 = new UpgradeAbilityNode();			addChild(abilityNode4);			abilityNode4.x = 340;			abilityNode4.y = 290;			abilityNode4.alpha = 0.5;			abilityNode5 = new UpgradeAbilityNode();			addChild(abilityNode5);			abilityNode5.x = 340;			abilityNode5.y = 350;			abilityNode5.alpha = 0.5;			switch (Player.who){				case "fire":					abilityNode1.upgradeAbilityNodeTitle.text = "Fireball - 5 damage";					abilityNode1.upgradeAbilityNodeBody.text = "Basic projectile attack \n +1 Fireballs per level";					abilityNode2.upgradeAbilityNodeTitle.text = "Imbued Bullets - +3 damage";					abilityNode2.upgradeAbilityNodeBody.text = "Imbues bullets with the power of fire for a short time \n + Imbue damage per level";					abilityNode3.upgradeAbilityNodeTitle.text = "FireNova - 20 damage";					abilityNode3.upgradeAbilityNodeBody.text = "Powerful close range attack \n + Damage and Size per level";					abilityNode4.upgradeAbilityNodeTitle.text = "Exploding Fireballs - 20% chance";					abilityNode4.upgradeAbilityNodeBody.text = "Fireballs have % chance to explode on contact \n + Chance of exploding per level";					abilityNode5.upgradeAbilityNodeTitle.text = "Pheonix";					abilityNode5.upgradeAbilityNodeBody.text = "Summons fiery creature";					break;				case "ice":					abilityNode1.upgradeAbilityNodeTitle.text = "Ice Spikes";					abilityNode1.upgradeAbilityNodeBody.text = "Slows and slightly damages enemies \n +2 Spikes per level";					abilityNode2.upgradeAbilityNodeTitle.text = "Enchange Body";					abilityNode2.upgradeAbilityNodeBody.text = "Temporaraly increases Speed and Ability Regen";					abilityNode3.upgradeAbilityNodeTitle.text = "Ice Shield";					abilityNode3.upgradeAbilityNodeBody.text = "Shield of ice protects you for a short time \n + Shield life per level ";					abilityNode4.upgradeAbilityNodeTitle.text = "Shatter";					abilityNode4.upgradeAbilityNodeBody.text = "Ice Spikes have % chance to shatter, creating shards \n + Chance of shattering per level";					abilityNode5.upgradeAbilityNodeTitle.text = "Hailstorm";					abilityNode5.upgradeAbilityNodeBody.text = "Hails down balls of ice, damaging all enemies";					break;				case "mech":					abilityNode1.upgradeAbilityNodeTitle.text = "Create Drone";					abilityNode1.upgradeAbilityNodeBody.text = "Conjure simple mechanical drone with small arms attack. \n +1 Drone per level";					abilityNode2.upgradeAbilityNodeTitle.text = "Upgraded Drone";					abilityNode2.upgradeAbilityNodeBody.text = "Drone is armed with a SMG";					abilityNode3.upgradeAbilityNodeTitle.text = "Plant mine";					abilityNode3.upgradeAbilityNodeBody.text = "Plants explosive mine that detonates after a short time.";					abilityNode4.upgradeAbilityNodeTitle.text = "Upgraded Drone";					abilityNode4.upgradeAbilityNodeBody.text = "Drone also drops mines.";					abilityNode5.upgradeAbilityNodeTitle.text = "Super Drone";					abilityNode5.upgradeAbilityNodeBody.text = "Heavily armed drone";					break;			}									//Weapon			upgradeWeaponNode1.visible = true;			upgradeWeaponNode1.weaponNotes.text = "Pistol \n Low damage, quick reload";			upgradeWeaponNode2.visible = false;			upgradeWeaponNode2.weaponNotes.text = "Magnum \n Powerful revolver";			upgradeWeaponNode3.visible = false;			upgradeWeaponNode3.weaponNotes.text = "Sub Machine Gun \n Burst Fire";			//Menu Buttons			saveButton.addEventListener(MouseEvent.CLICK, saveGame);			continueButton.addEventListener(MouseEvent.CLICK, continueGame);						addEventListener(Event.ENTER_FRAME, onFrame);		}		private function onFrame(e:Event){										if ( Game.isPaused ){				updateMenu();			}					}		private function updateMenu(){						//Activate or Deactivate "add" buttons			if ( Player.skillPoints <= 0){				if ( addBodyLevel.hasEventListener(MouseEvent.CLICK) ){					addBodyLevel.removeEventListener(MouseEvent.CLICK, addBodyLevelHandler);				}				if ( addWeaponLevel.hasEventListener(MouseEvent.CLICK) ){					addWeaponLevel.removeEventListener(MouseEvent.CLICK, addWeaponLevelHandler);				}				if ( addAbilityLevel.hasEventListener(MouseEvent.CLICK) ){					addAbilityLevel.removeEventListener(MouseEvent.CLICK, addAbilityLevelHandler);				}			}					if ( Player.skillPoints > 0){				if ( addBodyLevel.hasEventListener(MouseEvent.CLICK) == false){					addBodyLevel.addEventListener(MouseEvent.CLICK, addBodyLevelHandler);				}				if ( addWeaponLevel.hasEventListener(MouseEvent.CLICK) == false){					addWeaponLevel.addEventListener(MouseEvent.CLICK, addWeaponLevelHandler);				}				if ( addAbilityLevel.hasEventListener(MouseEvent.CLICK) == false){					addAbilityLevel.addEventListener(MouseEvent.CLICK, addAbilityLevelHandler);				}			}			//Player Stats			playerLevel.text = "" + Player.playerLevel;			xp.text = "" + Player.xp + "/" + Player.nextLevelXP;			skillPoints.text = "" + Player.skillPoints;			//Body			bodyLevel.text = "" + Player.staticBodyLevel;			bodyMaxHP.text = "" + Player.playerRef.maxHP;			bodySpeed.text = "" + Player.playerRef.speed;			bodyRotationSpeed.text = "" + Player.playerRef.rotationSpeed;			//bodyHealthRegen.text = "" + Player.playerRef.healthRegen;			bodyAbilityRegen.text = "" + Player.playerRef.abilityRegen;			bodyMaxHPPreview.text = "" + Player.playerRef.getOrSetBodyStats(Player.staticBodyLevel + 1).maxHP;			bodySpeedPreview.text = "" + Player.playerRef.getOrSetBodyStats(Player.staticBodyLevel + 1).speed;			bodyRotationSpeedPreview.text = "" + Player.playerRef.getOrSetBodyStats(Player.staticBodyLevel + 1).rotationSpeed;			//bodyHealthRegenPreview.text = "" + Player.playerRef.getOrSetBodyStats(Player.staticBodyLevel + 1).healthRegen;			bodyAbilityRegenPreview.text = "" + Player.playerRef.getOrSetBodyStats(Player.staticBodyLevel + 1).abilityRegen;			//Ability			abilityLevel.text = "" + Player.staticAbilityLevel;			//Ability Level Display updates			if ( Player.staticAbilityLevel >= 3 ){				//unlock shaddow				abilityNode2.alpha = 1;			}			if ( Player.staticAbilityLevel >= 5 ){				abilityNode3.alpha = 1;			}			if ( Player.staticAbilityLevel >= 7 ){				abilityNode4.alpha = 1;			}			if ( Player.staticAbilityLevel >= 9 ){				abilityNode5.alpha = 1;			}									//Weapon			weaponLevel.text = "" + Player.staticWeaponLevel;			//Weapon Level Display updates			if ( Player.staticWeaponLevel == 1 ){				upgradeWeaponNode1.visible = true;			}			else { upgradeWeaponNode1.visible = false; }			if ( Player.staticWeaponLevel == 2 ){				upgradeWeaponNode2.visible = true;			}			else { upgradeWeaponNode2.visible = false; }			if ( Player.staticWeaponLevel == 3 ){				upgradeWeaponNode3.visible = true;			}			else { upgradeWeaponNode3.visible = false; }					}						//Upgrade Functions		private function addBodyLevelHandler(e:MouseEvent){			Player.skillPoints -= 1;			Player.staticBodyLevel += 1;			Player.playerRef.bodyLevel += 1;			//trace(Game.player);			Player.playerRef.getOrSetBodyStats();		}		private function addWeaponLevelHandler(e:MouseEvent){			Player.skillPoints -= 1;			Player.staticWeaponLevel += 1;			Player.playerRef.weaponLevel += 1;						Player.playerRef.gun.updateProps();			Game.gameRef.hud.updateAmmo();			//Game.shotTimer.delay = Game.player.gun.gunProps.cooldown;		}		private function addAbilityLevelHandler(e:MouseEvent){			Player.skillPoints -= 1;			Player.staticAbilityLevel += 1;			Player.playerRef.abilityLevel += 1;		}		//Menu Button Functions		private function saveGame(e:MouseEvent){			trace("Game saved");		}		private function continueGame(e:MouseEvent){			Game.gameRef.pauseGame();		}	}}