package src.shooter {	import flash.display.MovieClip;	import flash.events.Event;	import flash.text.TextField;	import flash.system.System;	import flash.media.SoundMixer;	import src.core.Input;	import src.core.Game;	import src.core.Settings;	//TODO	//FOR BETA	//What happens when player dies	//Finish Abilities	//Finish Upgrade Menu	//Finish Act 1 levels	//Redo level0 and level1 messages, mention sounds and graphics todos	//a Title!	//improve Enemey AI		//More orders.  Maybe orders roles, "stationary", "grenadier", "melee", "caster", "general", "seargeant"		//build orders once, not every frame		//follow, but stop within range		//add close range attack	//domain and host	//Balance game		//make player faster, but decrease speed less per level		//Player gets more health, enemies get less		//		//FOR ALPHA	//Obstacle collision testing (skimming against wall)	//Remove unneeded imports and variables, esp on Game, Level, Player, Enemey	//Use Abstracted hit testing. Hit tests are scattered all over the place		//hit tests in: Projectile, FireNova, Explosion	//Give each gun a class extending from Gun, Gun(which) instead of Gun() with weaponLevel	//Graphics and Sounds	//Abstarct method for finding "targetAngle" between two objects	//FOR RELEASE	//Protect source code	public class ShooterGame extends Game{		//Custom Game Layers		var hud:HUD;		var um:UpgradeMenu;						//Dynamic Assets - to do hit checks against or to limit the number of items in play		public static var enemyList:Array = new Array(); //needed		public static var obstacleList:Array = new Array(); //needed		public static var magicList:Array = new Array(); //needed, now just for iceShield		public static var powerupList:Array = new Array(); //needed		public static var droneList:Array = new Array(); //needed				//public static var bulletList:Array = new Array(); //not needed						//Music		//var s_musicLevel:MusicLevel = new MusicLevel();		//var s_musicBoss:MusicBoss = new MusicBoss();		//var s_musicBoss2:MusicBoss2 = new MusicBoss2();		public function ShooterGame(){					super();					}//game				override public function waitForAdded(e:Event):void	{			//Add Game Layers						//Level Placeholder			addChildAt(currentLevel,0);			loadLevel("level0", false);						//Create HUD			hud = new HUD();			addChildAt(hud, 1);			//Create Upgrade Menu			um = new UpgradeMenu();			um.visible = false;			addChildAt(um, 2);			super.waitForAdded(e);			}						override public function loadLevel(level, stageComplete){			super.loadLevel(level, stageComplete);			//Load Map			//					 = new LevelX(x,y,direction);			switch (level){				case "level0":					import src.shooter.levels.Level0;					currentLevel = new Level0(320,400,0);										SoundMixer.stopAll()					//s_musicLevel.play();					break;				case "level1":					import src.shooter.levels.Level1;					currentLevel = new Level1(320,400,0);					break;				case "level2":					import src.shooter.levels.Level2;					currentLevel = new Level2(320,400,0);					break;				case "level3":					import src.shooter.levels.Level3;					currentLevel = new Level3(80,240,90);					break;				case "level4":					import src.shooter.levels.Level4;					currentLevel = new Level4(80,240,90);					break;				case "level5":					import src.shooter.levels.Level5;					currentLevel = new Level5(320,80,180);					break;				case "level6":					import src.shooter.levels.Level6;					currentLevel = new Level6(320,80,180);					break;				case "level7":					import src.shooter.levels.Level7;					currentLevel = new Level7(80,240,180);					break;				case "level8":					import src.shooter.levels.Level8;					currentLevel = new Level8(130,400,0);					break;				case "level9":					import src.shooter.levels.Level9;					currentLevel = new Level9(130,400,0);					break;				case "level10":					import src.shooter.levels.Level10;					currentLevel = new Level10(80,240,90);					break;				case "level11":					import src.shooter.levels.Level11;					currentLevel = new Level11(80,240,90);					break;				case "level12":					import src.shooter.levels.Level12;					currentLevel = new Level12(80,240,90);					break;				case "level13":					import src.shooter.levels.Level13;					currentLevel = new Level13(80,240,180);					break;				case "level14":					import src.shooter.levels.Level14;					currentLevel = new Level14(320,400,0);					break;				case "level15":					import src.shooter.levels.Level15;					currentLevel = new Level15(320,400,0);										SoundMixer.stopAll();					//s_musicBoss2.play();					break;			}			//currentLevel = new Level2();			addChildAt(currentLevel,0);			currentLevel.y = 80;			if ( stageComplete) {				pauseGame();				um.h1.text = "Stage Complete!";			}		}				override public function pauseGame(){			if(isPaused){				isPaused = false;				um.visible = false;			}			else{				isPaused = true;				um.visible = true;				um.h1.text = "Paused";			}		}	}}