package src.shooter {	import flash.display.MovieClip;	import flash.events.Event;	import flash.filters.BlurFilter;	import flash.geom.ColorTransform;	import src.core.Game;	import src.core.Settings;	public class Explosion extends MovieClip{		var dangerZone:MovieClip;		var active:Boolean = true;		var explosionSize:Number;		var friendly:String;		var splosions:Array = [];		var particles:Array = [];		var particleSpeed:Number = 13;		var particleDir:Array = [Math.random() * 360,Math.random() * 360,Math.random() * 360,Math.random() * 360,Math.random() * 360,Math.random() * 360,Math.random() * 360,Math.random() * 360,Math.random() * 360,];				var counter:int = 1;				var blur2:BlurFilter = new BlurFilter(3,3,1);		var filtersArray2 = [blur2];		var damage = 6; //  times explosionSize 6 - 60		public function Explosion(_explosionSize, _friendly){						damage = damage * _explosionSize;						explosionSize = _explosionSize;			friendly = _friendly;					//Randos			smoke.scaleX = 0.8;			smoke.scaleY = 0.8;						explosionTrails.rotation = Math.random() * 360;			explosionTrails.scaleX = 0;			explosionTrails.scaleY = 0;			explosionTrails.filters = filtersArray2;			explosion0.rotation = Math.random() * 360;			explosion0.scaleX = 0;			explosion0.scaleY = 0;			explosion1.rotation = Math.random() * 360;			explosion1.x = (Math.random() * 3) - 1.5;			explosion1.y = (Math.random() * 3) - 1.5;			explosion1.scaleX = 0;			explosion1.scaleY = 0;						explosion2.rotation = Math.random() * 360;			explosion2.x = (Math.random() * 3) - 1.5;			explosion2.y = (Math.random() * 3) - 1.5;			explosion2.scaleX = 0;			explosion2.scaleY = 0;						explosion3.rotation = Math.random() * 360;			explosion3.x = (Math.random() * 3) - 1.5;			explosion3.y = (Math.random() * 3) - 1.5;			explosion3.scaleX = 0;			explosion3.scaleY = 0;			//Sound			var s_boom:SoundBoom = new SoundBoom();			s_boom.play();								var blur:BlurFilter = new BlurFilter(3,3,1);			var filtersArray = [blur];			for (var p:int=0; p<9; p++){				particles[p] = new MovieClip();				particles[p].graphics.beginFill(0x000000, 1);  //black				particles[p].graphics.drawRect(0,0,_explosionSize,_explosionSize);				particles[p].graphics.endFill();				addChild(particles[p]);				particles[p].filters = filtersArray;							}						//area of affect explosion			dangerZone = new MovieClip();			if ( Settings.debug ){				dangerZone.graphics.beginFill(0xff0000, 1);			}			else{				dangerZone.graphics.beginFill(0xff0000, 0);			}			dangerZone.graphics.drawCircle(0,0,explosionSize * 10); //maybe give radius a variable			dangerZone.graphics.endFill();			addChildAt(dangerZone,0);			addEventListener(Event.ENTER_FRAME, onFrame, false, 0, true);		}		private function onFrame(e:Event){								//affect the env			affect();						grow();			moveParticles();			shake();						if ( counter >= 12 ){				remove();			}			else{				counter++;			}		}		private function grow(){							smoke.alpha -= 0.05;						//explosionTrails.alpha -= 0.1;			explosionTrails.scaleX += ( explosionSize * 0.07 )  * ( 1 / counter );			explosionTrails.scaleY += ( explosionSize * 0.07 )  * ( 1 / counter );			var colorOffset:Number = -1 * (counter * 30);			var alphaOffset:Number = -1 * (counter * 5)			explosionTrails.transform.colorTransform = new ColorTransform(1, 1, 1, 1, colorOffset, colorOffset, colorOffset, alphaOffset);			blur2.blurX = blur2.blurY = counter * 1.5;			explosionTrails.filters = filtersArray2;						explosion0.scaleX += ( explosionSize * 0.06 )  * ( 1 / counter );			explosion0.scaleY += ( explosionSize * 0.06 )  * ( 1 / counter );			explosion1.scaleX += ( explosionSize * 0.05 )  * ( 1 / counter );			explosion1.scaleY += ( explosionSize * 0.05 )  * ( 1 / counter );			explosion2.scaleX += ( explosionSize * 0.04 )  * ( 1 / counter );			explosion2.scaleY += ( explosionSize * 0.04 )  * ( 1 / counter );			explosion3.scaleX += ( explosionSize * 0.04 )  * ( 1 / counter );			explosion3.scaleY += ( explosionSize * 0.04 )  * ( 1 / counter );		}		private function moveParticles(){						for (var m:int=0; m<9; m++){				particles[m].y += particleSpeed * Math.sin((particleDir[m] - 90) * (Math.PI / 180));				particles[m].x += particleSpeed * Math.cos((particleDir[m] - 90) * (Math.PI / 180));				particles[m].alpha -= 0.1;			}			if (particleSpeed >= 1){				particleSpeed -= 1;			}					}				private function shake(){						Game.currentLevel.x = ( Math.random() * 6 ) - 3;			Game.currentLevel.y = 80 + ( Math.random() * 6 ) - 3;		}		private function affect(){						if ( active ){				//Enemies				if ( friendly == "true" || friendly == "both" ){					var enemies = ShooterGame.enemyList;					for (var n:int=0; n<enemies.length; n++){  //check all the enemies						if ( dangerZone.hitTestObject(enemies[n])){  //to see if they are NEAR the obstacles							var enemyAngle = Math.atan((this.y - enemies[n].y)/(this.x - enemies[n].x)) * (180/Math.PI); //find the angle							enemyAngle += 90;							//Convert to weird 180 flash angles							if ( enemies[n].x < x ){								enemyAngle = -1 * (180 - enemyAngle);							}												enemies[n].pushAngle = enemyAngle; //knock them AWAY from the obstacle							enemies[n].pushSpeed = 30;							enemies[n].hit(damage); // and hurt them  //FIXED DAMAGE?							active = false;						}					}				}				//Player				if ( friendly == "false" || friendly == "both" ){					if ( dangerZone.hitTestObject(Player.playerRef)){  //is player NEAR the obstacles						//trace("player hit");						var playerAngle = Math.atan((this.y -Player.playerRef.y)/(this.x - Player.playerRef.x)) * (180/Math.PI); //find the angle						playerAngle += 90;						//Convert to weird 180 flash angles						if ( Player.playerRef.x < x ){							playerAngle = -1 * (180 - playerAngle);						}						Player.playerRef.pushAngle = playerAngle; //knock them AWAY from the obstacle						Player.playerRef.pushSpeed = 30;						Player.playerRef.hit(damage); // and hurt them						active = false;						}				}								//Obstacles				var obstacles = ShooterGame.obstacleList;				var m:int=0;				while ( m<obstacles.length ){					//TODO First test if its breakable, then actally do a hitTest					if ( dangerZone.hitTestObject(obstacles[m].mainShape) ) {  // to see if it hits the obstacles						//if ( obstacles[m].isExplosive || obstacles[m].isBreakable ){ //and if it explodes							obstacles[m].hit(damage);							active = false;						//}					}					m++;				}							}		} //affect				public function remove(){			Game.currentLevel.x = 0;			Game.currentLevel.y = 80;			removeEventListener(Event.ENTER_FRAME, onFrame);			Game.remove(this);		}					}//explosion}