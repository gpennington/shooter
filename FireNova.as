package src.shooter {	import flash.display.MovieClip;	//import flash.events.*	import flash.filters.BlurFilter;	//import src.core.Game;	public class FireNova extends ShooterGameObject{		var speed:Number;		var damage:Number;		var life:Number;		public function FireNova(_shooter){			//props			speed = 3 + _shooter.abilityLevel;			damage = 3 * _shooter.abilityLevel;			life = 20 + _shooter.abilityLevel;			friendly = _shooter.friendly;			width = height = 0;			x = _shooter.x;			y = _shooter.y;						//New Nova.  Everything is vunerable			Player.playerRef.novaExempt = false;			//var ol = Game.obstacleList;			for (var o:int=0; o<ShooterGame.obstacleList.length; o++){				ShooterGame.obstacleList[o].novaExempt = false;			}			//var el = Game.enemyList;			for (var p:int=0; p<ShooterGame.enemyList.length; p++){				ShooterGame.enemyList[p].novaExempt = false;			}									var blur:BlurFilter = new BlurFilter(6,6,1);			var filtersArray = [blur];			filters = filtersArray;			super();		}		override public function behavior():void{				hitTestMagicX();				//Who does it hit test				if (friendly) {					hitTestEnemyX();				}				else{					hitTestPlayerX();				}								hitTestObstacleX();								//Move it				move();					//Life				if (counter >= life){					remove();				}		}		public function hitTestEnemyX(){			var enemies = ShooterGame.enemyList;			for (var n:int=0; n<enemies.length; n++){				if (this.hitTestObject(enemies[n]) && enemies[n].novaExempt == false ){					enemies[n].novaExempt = true;					enemies[n].hit(damage);				}			}		}		public function hitTestPlayerX(){			if (this.hitTestObject(Player.playerRef) && Player.playerRef.novaExempt == false){				Player.playerRef.novaExempt = true;				Player.playerRef.hit(damage);				//trace("nova hit on player");				//s_hit.play();			}		}		public function hitTestObstacleX(){			var obstacles = ShooterGame.obstacleList;			for (var n:int=0; n<obstacles.length; n++){  //test all the obstacles				if (this.hitTestObject(obstacles[n].mainShape) && obstacles[n].novaExempt == false){  // to see if it hits the obstacles					obstacles[n].novaExempt = true;					//s_hit.play();					//if ( obstacles[n].isExplosive || obstacles[n].isBreakable ){ //and if it explodes						obstacles[n].hit(damage);					//}				}			}		}		public function hitTestMagicX(){			var magics = ShooterGame.magicList;			for (var m:int=0; m<magics.length; m++){  //test all the magics				if (this.hitTestObject(magics[m]) && magics[m].isVunerable && magics[m].novaExempt == false){					if ( friendly != magics[m].friendly ) {						magics[m].novaExempt = true;						//s_hit.play();						magics[m].hit(damage);					}				}			}		}		private function move(){						//grow larger			width = height += speed;						speed += 0.2;			if (counter > 8){				alpha -= 0.05;			}		}				override public function remove(){									super.remove()		}			}}