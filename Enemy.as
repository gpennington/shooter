package src.shooter {	import flash.display.MovieClip;	import flash.display.Shape;	import flash.events.*	import flash.utils.Timer;	import flash.geom.Point;	import flash.display.BlendMode;	import flash.geom.ColorTransform;	import src.core.Game;	public class Enemy extends Avatar {		var targetAngle:Number;		var radio:Radio;				var colorOffset:Number = 10;		var healthBar:Shape;		var value:Number;		//AI		//MOVING		var orders:String;		var moveDirection:Number;				var readyToMove:Boolean = true;		var possibleMovements:Array = [];		var whichMovement:String;				var movementStart:Number = 0;		var movementCooldown:Number = 0;				var movementCompleted:Boolean = false;						//ACTIONS		var readyForAction:Boolean = true;		var possibleActions:Array = [];		var whichAction:int;		var actionStart:Number = 0;		var actionCooldown:Number = 24 + (Math.floor(Math.random() * 72)) // 1 - 5 seconds at 24fps		var shootTimer:Timer;		//					 (xPos, yPos, bodyLevel, weaponLevel, abilityLevel, [ abilityType, orders, commandingOfficer])		public function Enemy(xPos, yPos, bl, wl, al, a = "fire", o = null, co = false){						isVunerable = true;			friendly = false;			bodyLevel = bl;			weaponLevel = wl;			abilityLevel = al;			value = (bl * 25) + (wl * 25) + (al * 25);			orders = o;			getOrSetBodyStats();			hp = maxHP;			ShooterGame.enemyList.push(this);			x = xPos;			y = yPos;			//Hide guns			//Consider adding weaponLevel 0			pistol.visible = false;			pistols.visible = false;			smg.visible = false;			shotgun.visible = false;			machinegun.visible = false;			//Give them equipment			//Change appearance based on equipment			if ( wl != null ){				gun = new Gun(this);				addChild(gun);				body.transform.colorTransform = new ColorTransform(1, 1, wl, 1, 0, 0, colorOffset, 0);								shootTimer = new Timer(gun.gunProps.cooldown, 3);				shootTimer.addEventListener(TimerEvent.TIMER, shootStart,false,1,true);				shootTimer.addEventListener(TimerEvent.TIMER_COMPLETE, shootComplete,false,1,true);			}			if ( al != null ){				wand = new Wand(this, a);				addChild(wand);			}			if ( co ){				radio = new Radio(this);				addChild(radio);				value += 50;				coIcon.visible = true;			}						//Health Bar			healthBar = new Shape();			healthBar.graphics.lineStyle(1,0xffffff,1);			healthBar.graphics.beginFill(0xff0000);			healthBar.graphics.drawRect(-12,10,24,3);			healthBar.graphics.endFill();			addChild(healthBar);								}		override public function behavior():void{						//Choose a movement, if you don't alreay have one			if ( Player.playerRef.alive && counter >= movementStart + movementCooldown ){								//create list of movements				possibleMovements = [];				possibleMovements.push("stay put");				if ( orders == null ){					possibleMovements.push("follow");					possibleMovements.push("strafe right");					possibleMovements.push("strafe left")					possibleMovements.push("strafe right");					possibleMovements.push("strafe left")					possibleMovements.push("strafe right");					possibleMovements.push("strafe left")				}				else{					possibleMovements.push(orders);				}												//Chose action				var m = Math.floor(Math.random() * possibleMovements.length);				whichMovement = possibleMovements[m];								//Timing				movementStart = counter; //When action began				movementCooldown = 24 + (Math.floor(Math.random() * 48)) //How long does this last // 1 - 4 seconds at 24fps				readyToMove = false;  							} //choose new movement						//Move			moveEnemy();						//Actions			if ( readyForAction && Player.playerRef.alive && counter >= actionStart + actionCooldown ){								//create list of actions				possibleActions = [];								if ( gun ){					possibleActions.push("shoot"); //crappy atempt at weightng					possibleActions.push("shoot");					possibleActions.push("shoot");					possibleActions.push("shoot");					possibleActions.push("shoot");					possibleActions.push("shoot");					possibleActions.push("shoot");				}				if ( wand ){					possibleActions.push("cast");					possibleActions.push("cast");				}				if ( radio ){					possibleActions.push("reinforce");				}								possibleActions.push("grenade");												//Chose action				whichAction = Math.floor(Math.random() * possibleActions.length);								//Timing				actionStart = counter; //When action began				actionCooldown = 48 + (Math.floor(Math.random() * 72)) //How long before next action // 2 - 5 seconds at 24fps				readyForAction = false;  				switch ( possibleActions[whichAction] ){					case "shoot":						shoot();						break;					case "cast":						cast();						break;					case "reinforce":						reinforce();						break;					case "grenade":						//trace("thow grendade");						var grenade = new Grenade(this, targetAngle);						Game.currentLevel.topLayer.addChild(grenade);						readyForAction = true;						break;				}			} //choose new action						//Other stuff to do each frame			//Find the target angle			targetAngle = Math.atan((y - Player.playerRef.y)/(x - Player.playerRef.x)) * (180/Math.PI);			targetAngle = targetAngle + 90;			//Convert to weird 180 flash angles			if ( Player.playerRef.x < x ){				targetAngle = -1 * (180 - targetAngle);			}			rotation = targetAngle;						//update Health;			healthBar.width = 24 * (hp / maxHP);									push();		}		private function moveEnemy(){						//This Move/Collision testing code should be universal for game objects			oldPoint = new Point(x,y);			predictionPoint = new Point(x,y);						switch (whichMovement){				case "stay put":					break;				case "stationary":					break;									case "follow":									//TODO stop if too close					//if ( is close to player ){						//break;					//}										//Move the enemy					predictionPoint.y += speed * Math.sin((targetAngle - 90) * (Math.PI / 180));					predictionPoint.x += speed * Math.cos((targetAngle - 90) * (Math.PI / 180));										break;									case "strafe right":															predictionPoint.y += speed * Math.sin((targetAngle - 0) * (Math.PI / 180));					predictionPoint.x += speed * Math.cos((targetAngle - 0) * (Math.PI / 180));							break;				case "strafe left":										predictionPoint.y += speed * Math.sin((targetAngle - 180) * (Math.PI / 180));					predictionPoint.x += speed * Math.cos((targetAngle - 180) * (Math.PI / 180));					break;			}			x = predictionPoint.x;			y = predictionPoint.y;						if ( checkForObstacles(this.footprint ) ){				x = oldPoint.x;				y = oldPoint.y;				readyToMove = true;			}						//rotate			rotation = targetAngle;						coIcon.rotation -= 5;		}		//Actions		private function shoot(){			shootTimer.start();		}		private function shootStart(e:TimerEvent){			gun.shoot(targetAngle);		}		private function shootComplete(e:TimerEvent){			shootTimer.reset();			readyForAction = true;		}				public function cast(){			wand.shoot(targetAngle);			readyForAction = true;					}		public function reinforce(){			radio.call();			readyForAction = true;					}		public function fadeAway(e:Event){						if ( alpha > 0 ){				alpha -= 0.05;			}		}		override public function kill(){						super.kill();			//only enemies			removeChild(healthBar);			healthBar = null;			//take away the gun			if ( gun ){				gun.remove();				gun = null;				currentWeaponIcon.visible = false;								shootTimer.stop();				shootTimer.removeEventListener(TimerEvent.TIMER, shoot);						}						if ( wand ){				wand.remove();				wand = null;			}			if ( radio ){				radio.remove();				radio = null;			}						//Search list and delete from array			for(var i=0; i < ShooterGame.enemyList.length; i++)			{				if( ShooterGame.enemyList[i]==this) { ShooterGame.enemyList.splice(i,1) };			}			//Keep Score			Player.xp += value;			var pu:PopUp = new PopUp("+" + value);						Game.currentLevel.topLayer.addChild(pu);			pu.x = x;			pu.y = y;						//Fade away			addEventListener(Event.ENTER_FRAME, fadeAway, false, 0, true);			//Powerup			if ( Math.random() < 0.2 ){				var powerup:Powerup = new Powerup("random", x, y);				Game.currentLevel.bottomLayer.addChild(powerup);			}					}				override public function remove(){			if ( this.hasEventListener(Event.ENTER_FRAME) ){				removeEventListener(Event.ENTER_FRAME, fadeAway);			}			if ( healthBar ){				removeChild(healthBar);				healthBar = null;			}			//take away the gun			if ( gun ){				gun.remove();				gun = null;								shootTimer.stop();				shootTimer.removeEventListener(TimerEvent.TIMER, shoot);						}						if ( wand ){				wand.remove();				wand = null;			}						if ( radio ){				radio.remove();				radio = null;			}			//Search list and delete from array			for(var i=0; i < ShooterGame.enemyList.length; i++)			{				if(ShooterGame.enemyList[i]==this) { ShooterGame.enemyList.splice(i,1) };			}						//Keep Score			//Game.score += 1;						//trace("Enemy removed");						super.remove();					}		//Magic Effects		//TODO MOVE THIS TO AVATAR. PLAYERS CAN BE SLOWED TOO		public function slow(){			if ( isSlowed ){				//nothing			}			else {				trace("Enemy is slowed");				speed  = speed / 2;				var slowTimer = new Timer(3000,0);				slowTimer.start();				addEventListener(TimerEvent.TIMER, new function(){					trace("Enemy is unslowed");					speed = speed * 2;					slowTimer.stop();				});			}								}	}}