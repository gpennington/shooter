package src.shooter {	import flash.display.MovieClip;	import flash.display.Shape;	import flash.events.*	import flash.utils.Timer;	import flash.geom.Point;	import flash.display.BlendMode;	import flash.filters.GlowFilter;	import src.core.Game;	public class Boss1 extends ShooterGameObject{		//Props		var hidden:Boolean = true;		var weaponLevel:Number = 9;		var targetAngle:Number;		var gun:Gun;		public var alive:Boolean = true;		var healthBar;		var maxHP = 300;		public function Boss1(){						alpha = 0;			hp = 300;			isVunerable = false;			friendly = false			ShooterGame.enemyList.push(this);			gun = new Gun(this);			addChild(gun);			//Health Bar			healthBar = new Shape();			healthBar.graphics.lineStyle(1,0xffffff,1);			healthBar.graphics.beginFill(0xff0000);			healthBar.graphics.drawRect(-12,10,24,3);			healthBar.graphics.endFill();			addChild(healthBar);		}		public override function behavior():void{			//"Sink" into the water			if ( hidden && alpha > 0){				alpha -= 0.05;			}			else if ( hidden == false && alpha <= 1){				alpha += 0.05;			}						//Every x seconds, hide or unhide			if (counter % 240 == 0 && counter != 0){				hideToggle()			}			//Shoot every second if visible			if (counter % 36 == 0 && hidden == false){								targetAngle = 225 + (Math.random() * 90);				turret.rotation = targetAngle;				gun.shoot( targetAngle );			}			healthBar.width = 24 * (hp / maxHP);			//move();		}		private function hideToggle(){						if ( hidden ){ //then unhide				y = 100 + ( Math.random() * 280 ); //New Location				hidden = false;								isVunerable = true;				//trace("unhide");							}			else{ //in not, then hide				hidden = true;				isVunerable = false;				//trace("hide");			}					}						override public function kill(){			alive = false;			//Add Explode			var explosion:Explosion = new Explosion(7, true);			explosion.x = x;			explosion.y = y;			Game.currentLevel.topLayer.addChild(explosion);			var explosion2:Explosion = new Explosion(3, true);			explosion2.x = x + 10;			explosion2.y = y + 15;			Game.currentLevel.topLayer.addChild(explosion2);			var explosion3:Explosion = new Explosion(3, true);			explosion3.x = x - 10;			explosion3.y = y - 15;			Game.currentLevel.topLayer.addChild(explosion3);			var explosion4:Explosion = new Explosion(3, true);			explosion4.x = x - 15;			explosion4.y = y + 25;			Game.currentLevel.topLayer.addChild(explosion4);			var explosion5:Explosion = new Explosion(3, true);			explosion5.x = x + 15;			explosion5.y = y - 25;			Game.currentLevel.topLayer.addChild(explosion5);			remove();					}		override public function remove(){			alive = false;			//take away the gun			if ( gun != null ){				gun.remove();			}			this.blendMode = BlendMode.NORMAL;			//Search list and delete from array			for(var i=0; i < ShooterGame.enemyList.length; i++)			{				if( ShooterGame.enemyList[i]==this) { ShooterGame.enemyList.splice(i,1) };			}					//trace("drone removed");			super.remove();					}	}}