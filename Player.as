package src.shooter {	import flash.display.MovieClip;	import flash.events.Event;	import flash.geom.Point;	import flash.display.BlendMode;	import flash.geom.ColorTransform;	import src.core.Game;	import src.core.Input;	import src.core.HitTest;	public class Player extends Avatar {		//Player Stats		public static var playerLevel:int = 1;		public static var xp:Number = 0;		public static var nextLevelXP:Number = 0;		public static var skillPoints:Number = 50;		static var staticHP:Number = 0;				//Permanent Player Levels		public static var staticBodyLevel:Number = 1;		public static var staticWeaponLevel:Number = 1;		public static var staticAbilityLevel:Number = 1	;		//Status		public static var who:String = "fire";						var mouseDirection:Number;				public static var playerRef;				public function Player(){						alive = true;						isVunerable = true;			friendly = true;						playerRef = this;						bodyLevel = staticBodyLevel;			weaponLevel = staticWeaponLevel;			abilityLevel = staticAbilityLevel;			switch (who){				case "fire":					gun = new Gun(this);					wand = new Wand(this, "fire");					body.transform.colorTransform = new ColorTransform(3, 1, 1, 1, 50, 0, 0, 0);					break;				case "ice":					gun = new Gun(this);					wand = new Wand(this, "ice");					body.transform.colorTransform = new ColorTransform(1, 1, 3, 1, 0, 0, 50, 0);					break;				case "mech":					gun = new Gun(this);					wand = new Wand(this, "mech");					body.transform.colorTransform = new ColorTransform(1, 3, 1, 1, 0, 50, 0, 0);			}			addChild(gun);			addChild(wand);						getOrSetBodyStats();			if ( staticHP == 0 ){				staticHP = maxHP;			}			hp = staticHP;					}				public override function behavior():void{						super.behavior();						//TODO: CONSIDER MOVING ALOT OF THIS TO AVATAR			abilityPoints += abilityRegen * abilityRegenModifier;						//Ability			if ( Input.eKeyDown ){				cast();			}						//Manual Reload			if ( Input.rKeyDown && gun.currentlyReloading == false){				gun.reload();			}			//trace(Input.isMouseDown);			//trace(gun.readyToShoot);			if ( Input.isMouseDown && gun.readyToShoot){				gun.shoot(rotation);			}						//XP Check			xpCheck();									//Misc			powerups();						//Move			rotate();			move();			push();						//Health			health();					}		private function xpCheck(){						nextLevelXP = ( playerLevel * 5 ) * ( 50 * playerLevel ); 						//If enough XP to level up			if (xp >= nextLevelXP) {				//Gain a level				playerLevel += 1;								//Get skillPoint				skillPoints += 1;								//Tell the player				var pu:PopUp = new PopUp("Level Up!");				Game.currentLevel.topLayer.addChild(pu);				pu.x = x;				pu.y = y;			}					}		override protected function health(){						super.health();			staticHP = hp;								}				private function powerups(){						//var powerups = Game.powerupList;			for (var n:int=0; n< ShooterGame.powerupList.length; n++){				if (this.hitTestObject(ShooterGame.powerupList[n])){					ShooterGame.powerupList[n].snatch();				}			}					}		private function rotate(){						//Mouse			mouseDirection = Math.atan((y - Game.currentLevel.mouseY)/(x - Game.currentLevel.mouseX)) * (180/Math.PI);			//mouseDirection = Math.atan((y - stage.mouseY)/(x - stage.mouseX)) * (180/Math.PI);			mouseDirection += 90;			//Convert to weird 180 flash angles			//trace(x);			if ( Game.currentLevel.mouseX < x ){  //Why won't this work			//if ( stage.mouseX < x ){				mouseDirection = -1 * (180 - mouseDirection);			}						//head.rotation = mouseDirection;						//Rotate, finding the shortest route to the angle			if ( mouseDirection > rotation){ //to the right of the Player				if ( Math.abs(mouseDirection - rotation) < rotationSpeed ){ //if its close, just make it exact					rotation = mouseDirection;				}				else if ( Math.abs(mouseDirection - rotation) > 180){ //or rotate at increment					rotation -= rotationSpeed;				}				else {					rotation += rotationSpeed;				}			}			else if ( mouseDirection < rotation){ //to the left of the Player				if ( Math.abs(mouseDirection - rotation) < rotationSpeed ){  //if its close, just make it exact					rotation = mouseDirection;				}				else if ( Math.abs(mouseDirection - rotation) > 180){ //or rotate at increment					rotation += rotationSpeed;				}				else {					rotation -= rotationSpeed;				}			}		}//rotate		public function move(){						//In case you can't move there			oldPoint = new Point(x,y);			predictionPoint = new Point(x,y);			//Move			if(Input.upKeyDown)			{				predictionPoint.y -= speed;			}			if(Input.downKeyDown)			{				predictionPoint.y += speed;			}			if(Input.leftKeyDown)			{				predictionPoint.x -= speed;			}			if(Input.rightKeyDown)			{				predictionPoint.x += speed;			}			x = predictionPoint.x;			y = predictionPoint.y;			//If you hit an obstacle, move go back to last point			//THIS IS ALL FUNKY			//var obstacles = Game.obstacleList;			//for (var n:int=0; n<obstacles.length; n++){						for (var n:int=0; n<ShooterGame.obstacleList.length; n++){				/*				if (footprint.hitTestObject(Game.obstacleList[n].mainShape)){					//trace("hit - left/right");					x = oldPoint.x;				}				if (footprint.hitTestObject(Game.obstacleList[n].mainShape)){					//trace("hit - up/down");					y = oldPoint.y;				}				*/				if ( HitTest.complexHitTestObject(footprint, ShooterGame.obstacleList[n].mainShape ) ){					//trace("pixel perfect detection");					x = oldPoint.x;				}				if ( HitTest.complexHitTestObject(footprint, ShooterGame.obstacleList[n].mainShape ) ){					//trace("pixel perfect detection");					y = oldPoint.y;				}			}					}// move()						public function cast(){			if ( abilityPoints >= 50 ){			wand.shoot(rotation);			abilityPoints = 0;			}		}		override public function kill(){						alive = false;			trace("alive:" + alive);						//take away the gun			gun.remove();			gun = null;			wand.remove();			wand = null;			trace("killed!");						super.kill();								}				override public function remove(){			alive = false;						//Move the take aways to Avatar and remove from player and enemy			//take away the gun			gun.remove();			gun = null;			wand.remove();			wand = null;						//trace("Player removed");			super.remove();		}	}}