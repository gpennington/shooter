package src.shooter {	import flash.display.MovieClip;	import flash.events.Event;	import flash.text.TextField;	import flash.utils.setInterval;	import flash.system.System;	import src.core.Input;	import src.shooter.Settings;	import src.shooter.Player;	//import src.shooter.Avatar;	import src.shooter.HUD;	import src.shooter.levels.Level;	//import src.shooter.levels.*;	public class Game extends MovieClip{		public static var gameRef;		//Meta Info		public static var isPaused:Boolean = false;		//Game layers		public static var currentLevel = new MovieClip();		//var player:Player;		var hud:HUD;		var um:UpgradeMenu;		//var transition:Transition;		var debug:MovieClip;				//Dynamic Assets		public static var bulletList:Array = new Array();		public static var enemyList:Array = new Array();		public static var obstacleList:Array = new Array();		public static var magicList:Array = new Array();		public static var droneList:Array = new Array();		public static var powerupList:Array = new Array();		//Music		//var s_music:SoundMusic = new SoundMusic();		//Development helpers		//var level:String = "start";		public static var text_trace:TextField;		var text_trace2:TextField;		var fpsCount:int = 0;		public function Game(){			//TODO			//Remove unneeded imports and variables, esp on Game, Level, Player, Enemey			//Use Abstracted hit testing. Hit tests are scattered all over the place			//Give each gun a class extending from Gun, Gun(which) instead of Gun() with weaponLevel			//Seperate engine from Game.  Be generic as possible. Extend anything custom ( ShooterGameObject extends GameObject ) Engine classes could be:				//Game				//Level				//Input				//HitTest				//Gameobject				//Settings				//Utilites ( hitTest Scenarios, trig movement calcs, shit I do over and over )			//Finish Abilities			//Finish Upgrade Menu			//Define what GameObject actually is. Who needs this as a base class?				//Improve GO (shooter, friendly)				//Make some MovieClips into GOs ( mine, firenova, )			//Remove wandProps and define variables and formulas in wand.as for each ability			//Consider taking aways "Lists" Maybe magicList = iceShieldList and droneList					gameRef = this;						//On Frame 			this.addEventListener(Event.ADDED_TO_STAGE, waitForAdded);			function waitForAdded(e:Event):void	{				addEventListener(Event.ENTER_FRAME, onFrame);								//Add Game Layers								//Level Placeholder				addChildAt(currentLevel,0);				loadLevel("level0", false);								//Create HUD				hud = new HUD();				addChildAt(hud, 1);				//Create Upgrade Menu				um = new UpgradeMenu();				um.visible = false;				addChildAt(um, 2);				//Add input class				var input = new Input();				addChild(input);				//Debug				if ( Settings.debug ){					debug = new MovieClip();					addChild(debug);					createDebug();				}				//Music				//s_music.play();				//FPS counter				setInterval(updateFPSCount, 1000);			}						//Graph			//var ag = new ActiveGraph(120,true,false);			//addChild(ag);					}//game				private function onFrame(e:Event){									if ( Game.isPaused != true ){				//fps				fpsCount++;								//Debug stuff				if ( Settings.debug ){					text_trace2.text = "Current Level: " + currentLevel + "\n X: " + currentLevel.mouseX + "\n Y: " + currentLevel.mouseY + "\n "; // + currentLevel.player.playerRef.x;				}			} //isPaused											}// onFrame						public function loadLevel(level, stageComplete){			//Old Level			removeChild(currentLevel);			currentLevel = null;			//Load Map			//					 = new LevelX(x,y,direction);			switch (level){				case "level0":					import src.shooter.levels.Level0;					currentLevel = new Level0(320,400,0);					break;				case "level1":					import src.shooter.levels.Level1;					currentLevel = new Level1(320,400,0);					break;				case "level2":					import src.shooter.levels.Level2;					currentLevel = new Level2(320,400,0);					break;				case "level3":					import src.shooter.levels.Level3;					currentLevel = new Level3(80,240,90);					break;				case "level4":					import src.shooter.levels.Level4;					currentLevel = new Level4(80,240,90);					break;				case "level5":					import src.shooter.levels.Level5;					currentLevel = new Level5(320,80,180);					break;				case "level6":					import src.shooter.levels.Level6;					currentLevel = new Level6(320,80,180);					break;				case "level7":					import src.shooter.levels.Level7;					currentLevel = new Level7(70,240,180);					break;				case "level10":					import src.shooter.levels.Level10;					currentLevel = new Level10(80,240,180);					break;			}			//currentLevel = new Level2();			addChildAt(currentLevel,0);			currentLevel.y = 80;			if ( stageComplete) {				pauseGame();				um.h1.text = "Stage Complete!";			}		}				public static function remove(whichObject){						//Remove the objects children  //DO I EVEN NEED TO DO THIS?			while ( whichObject.hasOwnProperty("numChildren") && whichObject.numChildren > 0 ){				var child = whichObject.getChildAt(0);				//trace(whichObject + ": " + child + " removed");					whichObject.removeChild(child);				child = null;							}						//Remove the object			//trace(whichObject + " removed");			whichObject.parent.removeChild(whichObject);							whichObject = null;		}		public function pauseGame(){			if(isPaused){				isPaused = false;				um.visible = false;			}			else{				isPaused = true;				um.visible = true;				um.h1.text = "Paused";			}		}		private function updateFPSCount(){			if ( Settings.debug ){				text_trace.text = "FPS: " + fpsCount + "\n Memory: " + (System.totalMemoryNumber / 1000000).toFixed(2) + "MB \n" + "Bullets: " + bulletList.length + "\n" + "Enemies: " + enemyList.length;				fpsCount=0;			}		}				//Create Debug 		private function createDebug(){			//Trace			text_trace = new TextField();			text_trace.textColor = 0xffffff;			text_trace.x = 0;			text_trace.width = 640;			text_trace.y = 200;			text_trace.mouseEnabled = false;			debug.addChild(text_trace);						text_trace2 = new TextField();			text_trace2.textColor = 0xffffff;			text_trace2.x = 0;			text_trace2.width = 640;			text_trace2.y = 440;			text_trace2.mouseEnabled = false;			debug.addChild(text_trace2);		}	}}