package src.shooter {	import flash.display.MovieClip;	import flash.display.Shape;	import flash.events.*	import flash.utils.Timer;	import flash.geom.Point;	import flash.display.BlendMode;	import flash.filters.GlowFilter;	import src.core.Game;	public class Firebird extends ShooterGameObject{		//Stats		public var abilityLevel:Number = 1;		//public var abilityPoints:Number = 50;		var targetAngle:Number;		//Enemy AI junk		//var moveTimer:Timer;		var castTimer:Timer;		var isStopped:Boolean = false;		var fireCount:int;		public var speed:Number = 12;		//var rotationSpeed:Number = 5;		//var maxHp:Number = 125;		//var gun:Gun;		var wand:Wand;				var healthBar:Shape;		//		var shooter;//		public var friendly:Boolean;				public function Firebird(_shooter){						//ShooterGame.magicList.push(this);			x = 300;			y = 220;						shooter = _shooter;			friendly = _shooter.friendly;						wand = new Wand(this, "fire");			addChild(wand);									castTimer = new Timer(250, 25);			castTimer.addEventListener(TimerEvent.TIMER, cast,false,0,true);			castTimer.addEventListener("timerComplete", selfDestruct,false,0,true);			castTimer.start();			//Glow effect			var glow:GlowFilter = new GlowFilter(0xFF5A3C, 0.5, 15, 15, 5);			var filtersArray = [glow];			filters = filtersArray;						//Effect			var effect:AbilityEffect = new AbilityEffect("red");			effect.x = x;			effect.y = y;			Game.currentLevel.middleLayer.addChild(effect);					}		public override function behavior():void{			//Find the target angle			//targetAngle = Math.random() * 360;			//targetAngle = targetAngle + 90;			//Convert to weird 180 flash angles//			if ( Player.playerX < x + scrollOffset){//				targetAngle = -1 * (180 - targetAngle);//			}						//update Health;			//healthBar.width = 24 * (hp / maxHp);									//If Player is alive//			if (Player.alive){//				//Move or Keep Stopped//				if (isStopped){//					hangOut();//				}//				else{//					moveEnemy();//				}//			}//			push();			move();		}		public function move(){						targetAngle = Math.atan((y -240)/(x - 320)) * (180/Math.PI);			targetAngle = targetAngle + 90;			//Convert to weird 180 flash angles			if ( 320 < x ){				targetAngle = -1 * (180 - targetAngle);			}			rotation = targetAngle + 90;						y += speed * Math.sin((targetAngle - 0) * (Math.PI / 180));			x += speed * Math.cos((targetAngle - 0) * (Math.PI / 180));					}		public function cast(e:TimerEvent){			//trace("shoot bird");			wand.shoot(targetAngle);		}		private function selfDestruct(e:TimerEvent){			//trace("remove bird");			kill();		}				override public function kill(){			var effect:AbilityEffect = new AbilityEffect("red");			effect.x = x;			effect.y = y;			Game.currentLevel.middleLayer.addChild(effect);			remove();					}				override public function remove(){			//take away the wand			if ( wand != null ){				wand.remove();			}			//Remove Listeners			castTimer.removeEventListener(TimerEvent.TIMER, cast);			castTimer.removeEventListener("timerComplete", selfDestruct);			//Back to normal look						this.blendMode = BlendMode.NORMAL;			//Search list and delete from array			for(var i=0; i < ShooterGame.magicList.length; i++)			{				if( ShooterGame.magicList[i]==this) { ShooterGame.magicList.splice(i,1) };			}						super.remove();		}	}}