package src.shooter {	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.*	import flash.utils.Timer;	import flash.utils.setTimeout;	import flash.utils.clearTimeout;	import flash.filters.GlowFilter;	//import src.shooter.Bullet;		import src.core.Game;	public class Gun extends MovieClip{		public var gunProps:Object;		//var fromEnemy:Boolean;				var readyToShoot:Boolean = true;		var shotTimer:int = 0;				var burstWhere:Number;		var burst:Timer;		var b:int = 0;		//Gun Sounds		var s_pistol:SoundPistol = new SoundPistol();		var s_machinegun:SoundMachinegun = new SoundMachinegun();		var s_shotgun:SoundShotgun = new SoundShotgun();		var s_sniper:SoundSniper = new SoundSniper();		var s_reload:SoundReload = new SoundReload();		//Reload		var reloadID:uint; //timeout id		public var currentlyReloading:Boolean = false;		//Spell Effects		public var isFireImbued:Boolean = false;		var fireImbuedLife:int = 0;		var fireImbuedPower:Number = 5;		//Glow effect		var glow:GlowFilter = new GlowFilter(0xFF5A3C, 0.5, 15, 15, 5);		var filtersArray = [glow];		//Laser sight		//var laser;		//var laser2;		//var laserOn:Boolean = true;		var shooter;		public function Gun(s){						shooter = s;			//			laser = new Sprite();//			laser.graphics.beginFill(0xff0000);//			laser.graphics.drawRect(0,0,1,1);//			laser.graphics.endFill();//			addChild(laser);//			laser.rotation = 180;//			laser.height = 1;						gunProps = new Object();			updateProps();									addEventListener(Event.ENTER_FRAME, onFrame,false,0,true);					}		private function onFrame(e:Event){						if ( Game.isPaused != true ){								if ( readyToShoot == false ){					if ( shotTimer >= gunProps.cooldown ){						readyToShoot = true;						shotTimer = 0;					}					shotTimer++;				}				gunProps.power = gunProps.basePower; //Maybe shouldn't happen so often				//If gun is empty, reload				if (gunProps.currentRounds == 0 && currentlyReloading == false){					reload();				}								if ( isFireImbued ){					fireImbuedLife = 60;  //TODO SHOULD BE BASED ON SHOOTER'S Ability LEVEL					isFireImbued = false;				}				if ( fireImbuedLife > 0 ){					fireImbuedLife--;					gunProps.power = gunProps.basePower + fireImbuedPower;				}				//if ( laserOn ){					//adjustLaser();				//}							}		}		//		private function adjustLaser(){////			var obstacles = Game.obstacleList;//			var hitObstacle:Boolean = false;//			while ( hitObstacle == false)//			for (var n:int=0; n<obstacles.length; n++){//				if (laser.hitTestObject(obstacles[n].mainShape)){//					hitObstacle = true;//					laser.height -= 5;//				}//				else {//					laser.height += 5;//				}//			}////	//		}		public function reload(){			if ( currentlyReloading == false ){				reloadID = setTimeout(completeReload, gunProps.reload);				currentlyReloading = true;				if (shooter == Player.playerRef){ //only do interface updates for player  //Although, maybe HUD should query for this					Game.gameRef.hud.ammo.reload.width = 0;				}			}		}		private function completeReload(){			clearTimeout(reloadID);			gunProps.currentRounds = gunProps.totalRounds;			//trace("Reloaded!");			currentlyReloading = false;			//Sound			s_reload.play();		}		public function shoot(where){						//trace(gunProps.currentRounds);						//Only shoot if you have ammo			if ( gunProps.currentRounds > 0 && readyToShoot && currentlyReloading == false ){							var bullet:Bullet;				//cause burst fire weapons shoot somewhere else				burstWhere = where;								readyToShoot = false;											switch (shooter.weaponLevel){					case 1:												bullet = new Bullet(shooter, where, gunProps.speed, gunProps.power, false); //Remove type :Bullet						//ShooterGame.bulletList.push(bullet);						Game.currentLevel.middleLayer.addChild(bullet);						if ( fireImbuedLife > 0 ){  //THIS IS SHITY							bullet.filters = filtersArray;						}						//Sound						s_pistol.play();						//Expend Round						gunProps.currentRounds -= 1;						break;					case 2:						bullet = new Bullet(shooter, where, gunProps.speed, gunProps.power, false);						//ShooterGame.bulletList.push(bullet);						Game.currentLevel.middleLayer.addChild(bullet);						if ( fireImbuedLife > 0 ){							bullet.filters = filtersArray;						}//						bullet = new Bullet(shooter, where, gunProps.speed, gunProps.power);//						Game.bulletList.push(bullet);//						Game.currentLevel.addChild(bullet);//						if ( fireImbuedLife > 0 ){//							bullet.filters = filtersArray;//						}												//Sound						s_pistol.play();						//Expend Round						gunProps.currentRounds -= 1;							break;					case 3: //SMG						burst.start();						//Sound						s_machinegun.play();						break;					case 4: //Silenced SMG						burst.start();						//Sound						s_machinegun.play();						break;					case 5: //Shotgun						for (var shot:int = -3; shot<3; shot++){							var spread:Number = (10 * Math.random()) - 5;							bullet = new Bullet(shooter, where + spread, gunProps.speed - (Math.random()), gunProps.power, false);							//ShooterGame.bulletList.push(bullet);							Game.currentLevel.middleLayer.addChild(bullet);														if ( fireImbuedLife > 0 ){								bullet.filters = filtersArray;							}						}						//Sound						s_shotgun.play();						//Expend Round						gunProps.currentRounds -= 1;							break;					case 6: //Shotgun, buck						for (var shotB:int = -2; shotB<2; shotB++){							var spreadB:Number = (10 * Math.random()) - 5;							bullet = new Bullet(shooter, where + spreadB, gunProps.speed - (Math.random()), gunProps.power, false);							//ShooterGame.bulletList.push(bullet);							Game.currentLevel.middleLayer.addChild(bullet);							if ( fireImbuedLife > 0 ){								bullet.filters = filtersArray;							}						}						//Sound						s_shotgun.play();						//Expend Round						gunProps.currentRounds -= 1;							break;					case 7:						burst.start();						//Sound						s_machinegun.play();						break;					case 8:						burst.start();						//Sound						s_machinegun.play();						break;					case 9:	//Grenade launcher						bullet = new Bullet(shooter, where, gunProps.speed, gunProps.power, true); 						//ShooterGame.bulletList.push(bullet);						Game.currentLevel.middleLayer.addChild(bullet);						if ( fireImbuedLife > 0 ){  //THIS IS SHITY							bullet.filters = filtersArray;						}						//Sound						s_shotgun.play();						//Expend Round						gunProps.currentRounds -= 1;						break;					case 10:						bullet = new Bullet(shooter, where, gunProps.speed, gunProps.power, false);						//ShooterGame.bulletList.push(bullet);						Game.currentLevel.middleLayer.addChild(bullet);						//Sound						s_sniper.play();						//Expend Round						gunProps.currentRounds -= 1;							break;				}			}		}// end shoot				private function burstFire(e:TimerEvent){				var bullet:Bullet;						//recoil - THIS IS FUNKY - doesn't spread evenly from center			//var jitter = (b * Math.random());			var recoil = (b * gunProps.recoil);			if (Math.random() > 0.5 ){ recoil = recoil * -1; };						bullet = new Bullet(shooter, burstWhere + recoil, gunProps.speed, gunProps.power, false);			//ShooterGame.bulletList.push(bullet);			Game.currentLevel.middleLayer.addChild(bullet);						if ( fireImbuedLife > 0 ){  //THIS WHOLE IMBUED BULLETS THING IS SHITTY...in implementation.  solid idea though				bullet.filters = filtersArray;			}			//Expend Round			gunProps.currentRounds -= 1;				//How many shots per burst. tracks it, resets it after a complete burst			b++;			if( b == burst.repeatCount ){				burst.reset();				b=0;			}		}				public function remove(){							//Remove Listeners			removeEventListener(Event.ENTER_FRAME, onFrame);						//Remove the burst timer listener, if need be			if ( gunProps.type == "burst" ) {				burst.stop();				burst.removeEventListener(TimerEvent.TIMER, shoot);						}						//remove the display object			Game.remove(this);		}		public function updateProps(){			switch (shooter.weaponLevel){				case 1:					gunProps.name = "Pistol";					gunProps.type = "single";					gunProps.basePower = 6;					gunProps.speed = 20;					gunProps.reload = 1000;					//gunProps.cooldown = 150; //milliseconds					gunProps.cooldown = 5; //frames					gunProps.currentRounds = 9;					gunProps.totalRounds = 9;					//Visuals					//TODO THIS SHOULD BE IN PLAYER					if ( shooter is Avatar ){						shooter.pistol.visible = true;						shooter.pistols.visible = false;						shooter.smg.visible = false;						shooter.shotgun.visible = false;						shooter.machinegun.visible = false;						shooter.currentWeaponIcon = shooter.pistol;					}					break;				case 2:					gunProps.name = "Magnum";					gunProps.type = "single";					gunProps.basePower = 12;					gunProps.speed = 20;					gunProps.reload = 1500;					//gunProps.cooldown = 100; //milliseconds					gunProps.cooldown = 10; //frames					gunProps.currentRounds = 6;					gunProps.totalRounds = 6;					//Visuals					shooter.pistol.visible = true;					shooter.pistols.visible = false;					shooter.smg.visible = false;					shooter.shotgun.visible = false;					shooter.machinegun.visible = false;					shooter.currentWeaponIcon = shooter.pistol;					break;				case 3:					gunProps.name = "Sub-machine Gun";					gunProps.type = "burst";					gunProps.basePower = 6;					//gunProps.cooldown = 400; //milliseconds					gunProps.cooldown = 10; //frames					gunProps.speed = 20;					gunProps.reload = 2500;					gunProps.recoil = 3;					burst = new Timer(75, 3);					burst.addEventListener(TimerEvent.TIMER, burstFire,false,1,true);					gunProps.currentRounds = 24;					gunProps.totalRounds = 24;					//Visuals					if ( shooter is Avatar ){						shooter.pistol.visible = false;						shooter.pistols.visible = false;						shooter.smg.visible = true;						shooter.shotgun.visible = false;						shooter.machinegun.visible = false;						shooter.currentWeaponIcon = shooter.smg;					}					break;				case 4:					gunProps.name = "Sub-machine Gun, extended clip";					gunProps.type = "burst";					gunProps.basePower = 6;					//gunProps.cooldown = 400; //milliseconds					gunProps.cooldown = 10; //frames					gunProps.speed = 20;					gunProps.reload = 2500;					gunProps.recoil = 3;					burst = new Timer(75, 3);					burst.addEventListener(TimerEvent.TIMER, burstFire,false,1,true);					gunProps.currentRounds = 36;					gunProps.totalRounds = 36;					//Visuals					shooter.pistol.visible = false;					shooter.pistols.visible = false;					shooter.smg.visible = true;					shooter.shotgun.visible = false;					shooter.machinegun.visible = false;					shooter.currentWeaponIcon = shooter.smg;					break;				case 5:					gunProps.name = "Shotgun, bird shot";					gunProps.type = "single";					gunProps.basePower = 4;					//gunProps.cooldown = 750; //milliseconds					gunProps.cooldown = 16; //frames					gunProps.speed = 20;					gunProps.reload = 3000;					gunProps.currentRounds = 6;					gunProps.totalRounds = 6;					//Visuals					shooter.pistol.visible = false;					shooter.pistols.visible = false;					shooter.smg.visible = false;					shooter.shotgun.visible = true;					shooter.machinegun.visible = false;					shooter.currentWeaponIcon = shooter.shotgun;					break;				case 6:					gunProps.name = "Shotgun, buck shot";					gunProps.type = "single";					gunProps.basePower = 10;					//gunProps.cooldown = 750; //milliseconds					gunProps.cooldown = 16; //frames					gunProps.speed = 20;					gunProps.reload = 3000;					gunProps.currentRounds = 6;					gunProps.totalRounds = 6;					//Visuals					shooter.pistol.visible = false;					shooter.pistols.visible = false;					shooter.smg.visible = false;					shooter.shotgun.visible = true;					shooter.machinegun.visible = false;					shooter.currentWeaponIcon = shooter.shotgun;					break;				case 7:					gunProps.name = "Machine Gun";					gunProps.type = "burst";					gunProps.basePower = 6;					//gunProps.cooldown = 500; //milliseconds					gunProps.cooldown = 12; //frames					gunProps.speed = 20;					gunProps.reload = 3000;					gunProps.recoil = 2;					burst = new Timer(50, 5);					burst.addEventListener(TimerEvent.TIMER, burstFire,false,1,true);					gunProps.currentRounds = 30;					gunProps.totalRounds = 30;					//Visuals					shooter.pistol.visible = false;					shooter.pistols.visible = false;					shooter.smg.visible = false;					shooter.shotgun.visible = false;					shooter.machinegun.visible = true;					shooter.currentWeaponIcon = shooter.machinegun;					break;				case 8:					gunProps.name = "Machine Gun, +Scope";					gunProps.type = "burst";					gunProps.basePower = 6;					//gunProps.cooldown = 350; //milliseconds					gunProps.cooldown = 12; //frames					gunProps.speed = 20;					gunProps.reload = 3000;					gunProps.recoil = 1;					burst = new Timer(50, 5);					burst.addEventListener(TimerEvent.TIMER, burstFire,false,1,true);					gunProps.currentRounds = 30;					gunProps.totalRounds = 30;					//Visuals					if ( shooter is Avatar ){						shooter.pistol.visible = false;						shooter.pistols.visible = false;						shooter.smg.visible = false;						shooter.shotgun.visible = false;						shooter.machinegun.visible = true;						shooter.currentWeaponIcon = shooter.machinegun;					}					break;				case 9:					gunProps.name = "Grendade Launcher";					gunProps.type = "single";					gunProps.basePower = 30;					//gunProps.cooldown = 350; //milliseconds					gunProps.cooldown = 12; //frames										gunProps.speed = 35;					gunProps.reload = 3000;					//gunProps.recoil = 1.5;					//burst = new Timer(50, 5);					//burst.addEventListener(TimerEvent.TIMER, burstFire,false,1,true);					gunProps.currentRounds = 9;					gunProps.totalRounds = 9;					//Visuals					if ( shooter is Avatar ){						shooter.pistol.visible = false;						shooter.pistols.visible = false;						shooter.smg.visible = false;						shooter.shotgun.visible = false;						shooter.machinegun.visible = true;						shooter.currentWeaponIcon = shooter.machinegun;					}					break;				case 10:					gunProps.name = "Sniper";					gunProps.type = "single";					gunProps.basePower = 30;					gunProps.speed = 20;					gunProps.reload = 3000;					gunProps.cooldown = 1750; //milliseconds					gunProps.currentRounds = 4;					gunProps.totalRounds = 4;					//Visuals					shooter.pistol.visible = false;					shooter.pistols.visible = false;					shooter.smg.visible = false;					shooter.shotgun.visible = false;					shooter.machinegun.visible = true;					shooter.currentWeaponIcon = shooter.machinegun;					break;													}					}			}		}