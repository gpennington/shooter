package src.shooter {	import flash.display.MovieClip;	import flash.events.Event;	import flash.geom.Point;	import flash.display.BlendMode;	import src.core.Game;	import src.core.GameObject;	//Base class for interactive game objects	public class ShooterGameObject extends GameObject {		//Game-specific properties		public var isExplosive:Boolean;  //are these public?  they just need to be read		public var isBreakable:Boolean;		public var novaExempt:Boolean = false;		public var hasIceShield:Boolean = false;		public var isSlowed:Boolean = false;		//public var isInvincible:Boolean = false;		var isPermeable:Boolean = false;		//Game Specific Sounds		var s_hit:SoundHit = new SoundHit();		public function ShooterGameObject(){			super();								}			override public function onFrame(e:Event){			super.onFrame(e);		}		override public function hit(damage){						//Add Material type to determine what hit sounds plays			s_hit.play();						if ( this.isVunerable ){				this.blendMode = BlendMode.INVERT;			}			super.hit(damage);					}				public function checkForObstacles(whichObject):Boolean{						var hitObstacle:Boolean = false;			for (var n:int=0; n< ShooterGame.obstacleList.length; n++){				if (whichObject.hitTestObject(ShooterGame.obstacleList[n].mainShape)){					hitObstacle = true;				}			}			return hitObstacle;		}				public function push(){			oldPoint = new Point(x,y);			predictionPoint = new Point(x,y);			predictionPoint.y += pushSpeed * Math.sin((pushAngle - 90) * (Math.PI / 180));			predictionPoint.x += pushSpeed * Math.cos((pushAngle - 90) * (Math.PI / 180));						y = predictionPoint.y;			x = predictionPoint.x;						if ( checkForObstacles(this) ){				x = oldPoint.x;				y = oldPoint.y;			}						pushSpeed -= 5;			if ( pushSpeed < 0 ){				pushSpeed = 0;			}		}		public function hitTestEnemy(what){			for (var n:int=0; n<ShooterGame.enemyList.length; n++){				if (what.hitTestObject(ShooterGame.enemyList[n])){					return ShooterGame.enemyList[n];					break;				}			}		}		public function hitTestPlayer(what){			if (what.hitTestObject(Player.playerRef) && Player.playerRef.alive){				return true;			}		}				public function hitTestObstacle(what){			for (var o:int=0; o<ShooterGame.obstacleList.length; o++ ){				if (what.hitTestObject(ShooterGame.obstacleList[o].mainShape) && ShooterGame.obstacleList[o].isPermeable == false){  // to see if it hits the obstacles					return ShooterGame.obstacleList[o];					break;				}			}		}				public function hitTesMagic(what){			for (var m:int=0; m<ShooterGame.magicList.length; m++){ 				if (what.hitTestObject(ShooterGame.magicList[m]) ){					if ( what.friendly != ShooterGame.magicList[m].friendly ) {						return ShooterGame.magicList[m];						break;					}				}			}		}		override public function kill(){						super.kill();		}				override public function remove(){						super.remove();								}				}}