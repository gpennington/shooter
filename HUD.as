package src.shooter {	import flash.display.MovieClip;	import flash.display.Shape;	import flash.events.*	import src.core.Game;	public class HUD extends MovieClip{		var ammoIcon:Array = [];		public function HUD(){			//Stage Listeners			addEventListener(Event.ADDED_TO_STAGE, waitForAdded);			function waitForAdded(e:Event):void	{				removeEventListener(Event.ADDED_TO_STAGE, waitForAdded);				addEventListener(Event.ENTER_FRAME, onFrame);								updateAmmo();			}		}		public function onFrame(e:Event){			if ( Game.isPaused != true && Player.playerRef.alive ){								//trace(Player.alive);								//Player Level				playerLevel.text = "" + Player.playerLevel;				playerLevelShadow.text = "" + Player.playerLevel;								//XP				currentXP.text = "" + Player.xp + " / " + Player.nextLevelXP;								//Health				health.healthBarMask.height = 70 * ( Player.playerRef.hp /Player.playerRef.maxHP );								//Ability Points				ability.abilityMask.width = Player.playerRef.abilityPoints;				if ( Player.staticAbilityLevel < 3 && Player.playerRef.abilityPoints > 50 ) { Player.playerRef.abilityPoints = 50 };				if ( Player.staticAbilityLevel < 5 && Player.playerRef.abilityPoints > 100 ) { Player.playerRef.abilityPoints = 100 };				if ( Player.staticAbilityLevel < 6 && Player.playerRef.abilityPoints > 150 ) { Player.playerRef.abilityPoints = 150 };				if ( Player.staticAbilityLevel < 9 && Player.playerRef.abilityPoints > 200 ) { Player.playerRef.abilityPoints = 200 };				if ( Player.playerRef.abilityPoints > 300 ) { Player.playerRef.abilityPoints = 300 };								//Ammo				for (var a:int=0; a<Player.playerRef.gun.gunProps.totalRounds; a++){					//trace(a);					if ( a < Player.playerRef.gun.gunProps.currentRounds ){						ammoIcon[a].visible = true;					}					else {						ammoIcon[a].visible = false;					}				}				//IN PROGRESS				if ( Player.playerRef.gun && Player.playerRef.gun.currentlyReloading ){ //Needs fixing. First test is there because when you die, so does ur gun.  					ammo.reload.visible = true;				}				else{					ammo.reload.visible = false;				}				//Shot Reload Timer				if (ammo.reload.width < 300){					ammo.reload.width += ( 300/24 )  * ( 1000/Player.playerRef.gun.gunProps.reload);  //Make "reload" be in frames, not ms				}				else if (ammo.reload.width >= 300 ){					ammo.reload.width = 300;				}							}		}//onframe		public function updateAmmo(){						for (var r:int=0; r<ammoIcon.length; r++){				Game.remove(ammoIcon[r]);				//trace			}			ammoIcon = [];			//trace(Player.playerRef);			for (var a:int=0; a<Player.playerRef.gun.gunProps.totalRounds; a++){				switch (Player.staticWeaponLevel){					case 1:						ammoIcon[a] = new HUDBulletSmall();						ammoIcon[a].x = 20 + ( 10 * a);						break;					case 2:						ammoIcon[a] = new HUDBulletSmall();						ammoIcon[a].x = 20 + ( 10 * a);						break;					case 3:						ammoIcon[a] = new HUDBulletSmall();						ammoIcon[a].x = 20 + ( 10 * a);						break;					case 4:						ammoIcon[a] = new HUDBulletSmall();						ammoIcon[a].x = 20 + ( 6 * a);						break;					case 5:						ammoIcon[a] = new HUDBulletShell();						ammoIcon[a].x = 20 + ( 14 * a);						break;					case 6:						ammoIcon[a] = new HUDBulletShell();						ammoIcon[a].x = 20 + ( 14 * a);						break;					case 7:						ammoIcon[a] = new HUDBulletLarge();						ammoIcon[a].x = 20 + ( 8 * a);						break;					case 8:						ammoIcon[a] = new HUDBulletLarge();						ammoIcon[a].x = 20 + ( 8 * a);						break;					case 9:						ammoIcon[a] = new HUDBulletLarge();						ammoIcon[a].x = 20 + ( 8 * a);						break;				}				ammo.addChild(ammoIcon[a]);											}								}	}}