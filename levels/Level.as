package src.shooter.levels {	import flash.display.MovieClip;	import flash.events.Event;	import flash.display.BlendMode;	import src.shooter.ShooterGame;	import src.shooter.Player;	//import src.shooter.Obstacle;	import src.core.Game;	public class Level extends MovieClip{				//import src.shooter.Game;				var counter:int = 0;		var exitCount:int;		var enemiesNotCounted:int = 0; //Not counted to exit the level				//Some triggers should only happen once		var trapIsSet:Boolean = true;				var nextLevel:NextLevel = new NextLevel();		public var player:Player;		var playerX:int = 320;		var playerY:int = 320;		var playerDirection:int = 90;		public var bottomLayer = new MovieClip();		public var middleLayer = new MovieClip();		public var topLayer = new MovieClip();		public function Level(_playerX, _playerY, _playerDirection){						addChild(bottomLayer);			addChild(middleLayer);			addChild(topLayer);						playerX = _playerX;			playerY = _playerY			playerDirection = _playerDirection;						//Disable next level trigger			middleLayer.addChild(nextLevel);			//nextLevel.blendMode = BlendMode.OVERLAY;			nextLevel.visible = false;						addEventListener(Event.ADDED_TO_STAGE, waitForAdded,false,0,true);					}				function waitForAdded(e:Event){			addEventListener(Event.ENTER_FRAME, onFrame,false,0,true);			removeEventListener(Event.ADDED_TO_STAGE, waitForAdded);						//trace("level added");						//Create player			player = new Player();			player.x = playerX;			player.y = playerY;			player.rotation = playerDirection;			topLayer.addChild(player);		}		function onFrame(e:Event){			if ( Game.isPaused != true ){				counterTrigger();				counter++;				}						//Check if trap is triggered			var trap = this.getChildByName("trap");			if ( trap != null && this.contains(trap) ){				if ( Player.playerRef.hitTestObject(trap) && trapIsSet ){					trapIsSet = false;					trapTrigger();				}			}						//Check if enemies exist.  If not, enable the exit			if ( ShooterGame.enemyList.length - enemiesNotCounted <= 0 ){				//Activate next level trigger mc				nextLevel.visible = true;			}			else {				//Deactivate next level trigger mc				nextLevel.visible = false;							}			//Check if player tries to leave, note time			if ( Player.playerRef.hitTestObject(nextLevel) && nextLevel.visible ){				if ( exitCount == 0 ){					exitCount = counter;				}			}						//Exit if on the 			if ( Player.playerRef.hitTestObject(nextLevel) && nextLevel.visible && counter >= (exitCount + 18 ) ){				exitTrigger();			}									//var foo = this.numChildren;			//setChildIndex(player, 1);									}				//Level functions		function trapTrigger(){}				function exitTrigger(){						removeEventListener(Event.ENTER_FRAME, onFrame);						//Delete everything in the level			while ( bottomLayer.numChildren > 0 ){				var child = this.bottomLayer.getChildAt(0);				if ( child.hasOwnProperty("remove") ){					child.remove();					child = null;				}				else{					//trace("child: " + this.getChildAt(0) + " removed");					Game.remove(this.bottomLayer.getChildAt(0));									}			}			while ( middleLayer.numChildren > 0 ){				var child2 = this.middleLayer.getChildAt(0);				if ( child2.hasOwnProperty("remove") ){					child2.remove();					child2 = null;				}				else{					//trace("child: " + this.getChildAt(0) + " removed");					Game.remove(this.middleLayer.getChildAt(0));									}			}			while ( topLayer.numChildren > 0 ){				var child3 = this.topLayer.getChildAt(0);				if ( child3.hasOwnProperty("remove") ){					child3.remove();					child3 = null;				}				else{					//trace("child: " + this.getChildAt(0) + " removed");					Game.remove(this.topLayer.getChildAt(0));									}			}			while ( numChildren > 0 ){				var child4 = this.getChildAt(0);				if ( child4.hasOwnProperty("remove") ){					child4.remove();					child4 = null;				}				else{					//trace("child: " + this.getChildAt(0) + " removed");					Game.remove(this.getChildAt(0));									}			}					}				function counterTrigger(){}	}}