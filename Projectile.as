package src.shooter {	import flash.display.MovieClip;	import flash.events.Event;	//import src.core.Game;		public class Projectile extends ShooterGameObject{				//props		var angle:Number;		var speed:Number;		var damage:Number;		var life:Number = 96;		//TODO remove this? Or maybe call it something else? It basically prevents it from hitting two things. Its very possible it could detect a hit with several objects in the same frame. It that happens it would try to remove itself several times in one frame.				var stillMoving:Boolean = true;				var ignoreObstacles:Boolean = false;		public function Projectile(_shooter, _angle, _speed, _damage){			super();			shooter = _shooter;			angle = _angle;			speed = _speed;			damage = _damage;						x = _shooter.x;			y = _shooter.y;									friendly = shooter.friendly;			rotation = angle;					}		override public function behavior():void{						//if ( Game.isPaused != true ){				//trace(friendly);				//Move it				move();				if ( stillMoving ){  //DO WE NEED STILLMOVING??!					var hitMagic = hitTesMagic(this);					if ( hitMagic ){						hitMagic.hit(damage);						stillMoving = false;						kill();					}				}				//Who does it hit test, Player or Enemies				if ( friendly ){ //Friendly 					if ( stillMoving ){												var hitEnemy = hitTestEnemy(this);						if ( hitEnemy ){							if ( this is IceSpike ){								//TODO hitEnemy.slow();							}							hitEnemy.hit(damage);							stillMoving = false;							kill();						}					}				}				else{ //From Enemy					if ( stillMoving ){												if ( hitTestPlayer(this) ){							Player.playerRef.hit(damage);							stillMoving = false;							kill();						}					}				}								//Obstacles				if ( stillMoving && ignoreObstacles == false){										var hitObstacle = hitTestObstacle(this);					if (hitObstacle){						hitObstacle.hit(damage);						stillMoving = false;						kill();							}				}																//life -= 1;				//Life				if (counter >= life){					stillMoving = false;					remove();				}										//}		}//		public function hitTestEnemy(){//			var myEnemies = ShooterGame.enemyList;//			for (var n:int=0; n<myEnemies.length; n++){//				if (this.hitTestObject(myEnemies[n])){//					myEnemies[n].hit(damage);//					stillMoving = false;//					kill();//				}//			}//		}		//		public function hitTestEnemyFoo(){//			//			var hitEnemy = ShooterGameObject.hitTestEnemyX(this);//			if ( hitEnemy ){//				hitEnemy.hit(damage);//				stillMoving = false;//				kill();//			}//			//		}//		public function hitTestPlayer(){//			if (this.hitTestObject(Player.playerRef) && Player.alive){//				Player.playerRef.hit(damage);//				stillMoving = false;//				kill();//			}////		}//		//		public function hitTestPlayerFoo(){//			//////		}//		public function hitTestObstacle(){//			var obstacles = ShooterGame.obstacleList;//			var n:int=0;//			while ( n<obstacles.length && stillMoving ){//				if (this.hitTestObject(obstacles[n].mainShape) && obstacles[n].isPermeable == false){  // to see if it hits the obstacles//					//if ( obstacles[n].isExplosive || obstacles[n].isBreakable ){ //and if it explodes//						obstacles[n].hit(damage);//					//}//					//else{//						//obstacles[n].hit(0);//					//}//					stillMoving = false;//					kill();//				}//				n++;//			}//		}//		//		public function hitTestObstacleFoo(){//			//			var hitObstacle = ShooterGameObject.hitTestObstacleX(this);//			if (hitObstacle){//				obstacles[n].hit(damage);//				stillMoving = false;//				kill();////			}//						//					//}//					//else{//						//obstacles[n].hit(0);//					//}//				}//				n++;//			}//		}		//		public function hitTestMagic(){//			var magics = ShooterGame.magicList;//			for (var m:int=0; m<magics.length; m++){  //test all the obstacles//				//if (this.hitTestObject(magics[m]) && magics[m].hasOwnProperty("isBreakable")){//				if (this.hitTestObject(magics[m]) && magics[m].isBreakable && stillMoving){//					if ( friendly != magics[m].friendly ) {//					//if ( magics[m].isBreakable){  // to see if it hits the obstacles//						magics[m].hit(damage);  //doesn't like this for some reason//						stillMoving = false;//						kill();//					}////				}//			}//		}		public function move(){						//remove if off the screen			if ( this.y < -10 || this.y > 490 || this.x < -10 || this.x > 650) { //if offscreen				stillMoving = false;				remove();			}					}		override public function kill(){									remove();		}				override public function remove(){															super.remove();			//Remove Listeners			//removeEventListener(Event.ENTER_FRAME, onFrame)			//Remove Object			//Game.remove(this);		}	}}